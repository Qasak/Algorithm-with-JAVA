package leetcode.template.DP;

/**
 * @author Wangjs
 * @version 1.0
 * @date 2020/12/10 18:46
 * K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。
 * 存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，
 * 从 F 楼层或比它低的楼层落下的鸡蛋都不会破。
 * 输出测量出F的最小测试次数
 *
 *
 * 输入：K = 1, N = 2
 * 输出：2
 * 解释：
 * 鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
 * 否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
 * 如果它没碎，那么我们肯定知道 F = 2 。
 * 因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。
 *
 * 输入：K = 2, N = 6
 * 输出：3
 *
 * 输入：K = 3, N = 14
 * 输出：4
 *
 * 1 <= K <= 100
 * 1 <= N <= 10000
 *
 *
 */
public class EggDrop_887 {
    /**
     *
     * 状态可以表示成 (K, N)，其中 K 为鸡蛋数，N 为楼层数。当我们从第 X 楼扔鸡蛋的时候：
     *
     * 如果鸡蛋不碎，那么状态变成 (K, N-X)，即我们鸡蛋的数目不变，但答案只可能在上方的 N-X 层楼了。
     * 也就是说，我们把原问题缩小成了一个规模为 (K, N-X)的子问题；
     *
     * 如果鸡蛋碎了，那么状态变成 (K-1, X-1)，即我们少了一个鸡蛋，但我们知道答案只可能在第 X 楼下方的 X-1 层楼中了。
     * 也就是说，我们把原问题缩小成了一个规模为 (K-1, X-1) 的子问题。
     *
     * 定义dp[K, N]为(K, N) 状态下最少需要的步数
     * dp[K, N] =1 + min(max(dp[K - 1][X - 1], dp[K][N - X])) X属于[1, N];
     * 一共KN个状态，枚举X要N次，共KN^2复杂度
     *
     *
     * */
    public int superEggDrop(int K, int N) {
        int[][] dp = new int[K + 1][N + 1];
        for (int m = 1; m <= N; m++) {
            dp[0][m] = 0; // zero egg
            for (int k = 1; k <= K; k++) {
                dp[k][m] = dp[k][m - 1] + dp[k - 1][m - 1] + 1;
                if (dp[k][m] >= N) {
                    return m;
                }
            }
        }
        return N;
    }
}
