// 我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。
// 1是丑数
// 丑数序列：1, 2, 3, 4, 5, 6, 8, 9, 10, 12

/*
1.丑数的递推性质： 丑数只包含因子 2, 3, 5 ，因此有 “丑数 = 某较小丑数 × 某因子” （例如：10 = 5×2）
比如 要求x10(12) 
有只可能有三种情况转移过来
xa x 2
xb x 3
xc x 5
其中xi乘以对应的因子，恰好比x9(10)大（不能大太多）=> 对应到代码：初始下标都为0，每次通过该下标更新了，那个下标就++
=>
xa = 6
xb = 4
xc = 3
然后取最小值 xb * 3 = 12
2.初始状态dp[0] = 1
3.返回值：dp[n - 1]



**/


class Solution {
    public int nthUglyNumber(int n) {
        int[] dp = new int[n];
        dp[0] = 1;
        // 2,3,5因子对应的下标
        int i2 = 0, i3 = 0, i5 = 0;
        for (int i = 1; i < n; i++) {
            // 2,3,5因子下标对应的值再乘对应因子
            int x2 = dp[i2] * 2, x3 = dp[i3] * 3, x5 = dp[i5] * 5;
            // 更新当前丑数(三种因子中最小的)
            dp[i] = Math.min(Math.min(x2, x3), x5);
            // 查一下是哪个因子导致的更新，对应下标++
            if(dp[i] == x2) {
                i2++;
            }
            if(dp[i] == x3) {
                i3++;
            }
            if(dp[i] == x5) {
                i5++;
            }
        }
        return dp[n - 1];
    }
}
/*
nums2, nums3, nums5 中是存在重复的解的， 例如 nums2[2] == 3*2, nums3[1] == 2*3 都计算出了 6 这个结果， 所以在合并 3 个有序数组的过程中， 还需要跳过相同的结果， 这也就是为什么在比较的时候， 需要使用 3 个并列的 if... if... if... 而不是 if... else if... else 这种结构的原因。
说白了，就是把所有丑数列出来，然后从小到大排序。而大的丑数必然是小丑数的2/3/5倍， 。每次就从那数组中取出一个最小的丑数归并到目标数组中。
**/